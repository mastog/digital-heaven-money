---
import { markdownify } from "../..//content/textConverter";
import ImageMod from "../../components/ImageMod.astro";
interface TestimonialItem {
  avatar: string;
  name: string;
}

interface TestimonialData {
  enable: boolean;
  title: string;
  description: string;
  testimonials: TestimonialItem[];
}

interface Props {
  testimonialData: TestimonialData
}

const { testimonialData } = Astro.props as Props;
---

{
  testimonialData.enable && (
    <section class="section">
      <div class="w-full max-w-[1280px] mx-auto">
        <div class="relative flex flex-col-reverse items-center">
          <div class="container">
            <div class="row">
              <div class="col-12">
                <div class="swiper testimonial-slider">
                  <div class="swiper-wrapper">
                    {testimonialData.testimonials.map(
                      (item: {
                        avatar: string;
                        name: string;
                      }) => (
                        <div class="swiper-slide">
                          <div class="rounded-lg bg-green px-7 py-5 dark:bg-darkmode-light">
                            <div class="text-text-dark dark:text-white cursor-pointer" >
                                <ImageMod
                                  height={400}
                                  width={400}
                                  class="rounded-full w-full filter grayscale transition hover:scale-110 original-image" // 添加标识类
                                  src={item.avatar}
                                  alt={item.name}
                                  format="webp"
                                />
                              </div>
                            <div class="mt-5 flex items-center">
                              <div>
                                <h3
                                  set:text={item.name}
                                  class="h5 font-primary font-semibold"
                                />
                              </div>
                            </div>
                          </div>
                        </div>
                      )
                    )}
                  </div>
                  <div class="testimonial-slider-pagination mt-9 flex items-center justify-center text-center" />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}
<style is:global>
  @keyframes float-up {
    from {
      transform: translateY(0);
      opacity: 1;
    }
    to {
      transform: translateY(-100px);
      opacity: 0;
    }
  }

  .clone-animation {
    animation: float-up 1s ease-out forwards;
    position: fixed;
    pointer-events: none;
    z-index: 9999;
  }
</style>
<script>
  import { Swiper } from "swiper";
  import "swiper/css";
  import "swiper/css/pagination";
  import { Autoplay, Pagination } from "swiper/modules";

  // 初始化 Swiper
  const swiper = new Swiper(".testimonial-slider", {
    modules: [Pagination, Autoplay],
    spaceBetween: 24,
    loop: true,
    centeredSlides: false,
    autoplay: {
      delay: 2500,
      disableOnInteraction: false,
    },
    pagination: {
      el: ".testimonial-slider-pagination",
      type: "bullets",
      clickable: true,
    },
    breakpoints: {
      768: {
        slidesPerView: 3,
      },
      992: {
        slidesPerView: 5,
      },
    },
    // 添加初始化回调确保元素加载
    on: {
      init: function () {
        attachImageClickHandlers();
      },
    },
  });

  // 使用事件委托处理动态元素
  function attachImageClickHandlers() {
    document.querySelector('.testimonial-slider').addEventListener('click', function(e) {
      const img = e.target.closest('.original-image');
      if (img) {
        const rect = img.getBoundingClientRect();
        const clone = img.cloneNode(true);

        clone.style.position = 'fixed';
        clone.style.left = `${rect.left}px`;
        clone.style.top = `${rect.top}px`;
        clone.style.width = `${rect.width}px`;
        clone.style.height = `${rect.height}px`;
        clone.style.pointerEvents = 'none';
        clone.classList.add('clone-animation');

        document.body.appendChild(clone);

        const imgSrc = img.getAttribute('data-src');
        if (window.dropCircle && imgSrc) {
          window.dropCircle(imgSrc);
        }

        clone.addEventListener('animationend', () => clone.remove());
      }
    });
  }
</script>
