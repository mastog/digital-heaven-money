---
import Card from "../ui/Card.astro";
import { apiRequest } from '../../utils/api';
const enableClientScript = true;

const user = await apiRequest(
        "/profile",
        "GET",
        {},
        Astro,
      )|| {
  username: "John Doe",
  email: "johndoe@example.com",
  gender: "Femboy",
  location: "San Francisco, CA",
  introduction: "A passionate software engineer with experience in building scalable applications and modern web technologies.",
  pic_url: "/uploaded_Pic/profile.jpg"
};
---

<Card>
    <!-- Profile Header -->
    <header class="w-full max-w-2xl bg-green rounded-lg p-6 flex flex-col items-center mx-auto relative">
        <div id="profileImageWrapper" class="relative w-24 h-24">
          <img id="profileImage" src={user.pic_url ? user.pic_url : "/images/profile.jpg"} alt="Profile Picture"
             class="w-24 h-24 rounded-full shadow-xl transition duration-300">
          <div id="uploadOverlay" class="absolute inset-0 bg-black bg-opacity-40 rounded-full flex items-center justify-center opacity-0 transition">
            <img
              src="/images/edit.svg"
              class="h-8 w-8"
            />
          </div>
        </div>
        <h1 class="text-2xl font-bold mt-4">{user.username}</h1>
        <h5 class="text-sm text-gray-500 mb-4"> </h5>

        <!-- New Edit Toggle -->
        <div class="edit-switch">
            <label class="switch">
                <input type="checkbox" id="editToggle">
                <span class="slider">
                    <span class="edit-text">Confirm</span>
                    <span class="view-text">Edit</span>
                </span>
            </label>
        </div>
    </header>

    <!-- Main Content -->
    <main class="w-full max-w-2xl grid gap-6 mt-6 mx-auto">
        <section class="bg-green rounded-lg p-5">
            <!-- About Section -->
            <section class="bg-green rounded-lg pr-5">
                <h2 class="text-xl font-semibold mb-2">About</h2>
                <p class="text-gray-700 editable w-full" id="introduction">{user.introduction}</p>
            </section>
        </section>

        <!-- Personal Details Section -->
        <section class="bg-green rounded-lg p-5 mb-[30px]">
            <h2 class="text-xl font-semibold mb-4">Personal Details</h2>
            <div class="card-info grid grid-cols-2 gap-4">
                <div class="font-semibold flex items-center">
                    <img src="/images/profile1.svg" alt="User Icon" class="w-5 h-5 mr-2"> User Name
                </div>
                <p class="px-2 py-1 border-2 border-transparent transition-colors duration-200">{user.username}</p>

                <div class="font-semibold flex items-center">
                    <img src="/images/profile3.svg" alt="Gender Icon" class="w-5 h-5 mr-2"> Gender
                </div>
                <p class="editable" id="gender">{user.gender}</p>

                <div class="font-semibold flex items-center">
                    <img src="/images/profile4.svg" alt="Email Icon" class="w-5 h-5 mr-2"> Email
                </div>
                <p class="editable" id="email">{user.email}</p>

                <div class="font-semibold flex items-center">
                    <img src="/images/profile5.svg" alt="Location Icon" class="w-5 h-5 mr-2"> Location
                </div>
                <p class="editable" id="location">{user.location}</p>
            </div>
        </section>
    </main>

    <style>
        .card-info {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 1rem;
            row-gap: 1.5rem;
        }

        .card-info > div {
            display: flex;
            align-items: center;
            height: 100%;
            position: relative; /* 使伪元素相对于父元素定位 */
        }

        .card-info > div:not(:last-of-type)::after {
            content: '';
            position: absolute;
            left: 0;
            right: 0;
            bottom: -13px; /* 调整分割线的位置，使其与上下行有相同的距离 */
            height: 2px; /* 分割线的高度 */
            background-color: rgba(0, 0, 0, 0.1); /* 分割线的颜色 */
        }

        .card-info > p {
            position: relative; /* 使伪元素相对于 p 元素定位 */
        }

        .card-info > p:not(:last-of-type)::after {
            content: '';
            position: absolute;
            left: 0;
            right: 0;
            bottom: -15px; /* 调整分割线的位置 */
            height: 2px; /* 分割线的高度 */
            background-color: rgba(0, 0, 0, 0.1); /* 分割线的颜色 */
        }

        .card-info h4 {
            font-weight: bold;
        }

        .card-info p {
            color: #000;
        }

        body {
            background-color: #f6f6f6;
        }

        .bg-gray-300 {
            background-color: rgba(223, 223, 223, 0.46);
        }

        .card-info h4 img {
            width: 20px;
            height: 20px;
            margin-right: 8px;
        }

        .switch {
            position: relative;
            display: inline-block;
            width: 120px;
            height: 34px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 10px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: #8d8d8d;
        }

        input:checked + .slider:before {
            transform: translateX(86px);
        }

        .edit-text, .view-text {
            color: black;
            font-size: 0.9rem;
            margin: 0 5px;
            z-index: 1;
            transition: opacity 0.4s;
        }

        .view-text { opacity: 1; }
        .edit-text { opacity: 0; }

        input:checked + .slider .view-text { opacity: 0; }
        input:checked + .slider .edit-text { opacity: 1; }

        .editable {
            padding: 5px 10px;
            border: 2px solid transparent;
            transition: border-color 0.2s;
        }

        /* 可编辑状态样式 */
        .editable[contenteditable="true"] {
            background: #f8f8f8;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            display: inline-block;
            align-items: center;
            min-height: calc(1em + 4px);
            line-height: 1.5;
            padding: 5px 10px;
            vertical-align: baseline;
            box-sizing: content-box;
            word-break: break-word;
            white-space: pre-wrap;
            overflow-wrap: break-word;
        }

        .editable[contenteditable="true"]:focus {
            background: #fff;
            border-color: #8d8d8d;
            outline: none;
            box-shadow: 0 0 0 2px rgba(144, 202, 249, 0.3);
        }

        #profileImageWrapper {
          position: relative;
        }

        #profileImageWrapper.cursor-pointer {
          cursor: pointer;
        }

        #uploadOverlay {
          transition: opacity 0.3s;
        }

        #profileImageWrapper.cursor-pointer:hover #uploadOverlay {
          opacity: 1;
        }
    </style>

    {enableClientScript && (
    <script>
        import { apiRequest } from '../../utils/api';
        const toggleEdit = document.getElementById('editToggle');
        const editables = document.querySelectorAll('.editable');
        const profileImage = document.getElementById('profileImage');
        const uploadOverlay = document.getElementById('uploadOverlay');
        const profileImageWrapper = document.getElementById('profileImageWrapper');
        let selectedImageFile = null; // 用来保存选中的图片文件

        // 添加邮箱校验
        function validateEmail(email) {
            const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(email);
        }

        toggleEdit.addEventListener('change', function (event) {
            const isEdit = this.checked;

            if (!isEdit) {
                // 进入 Confirm 模式
                let hasInvalid = false;
                editables.forEach(element => {
                    const key = element.previousElementSibling?.innerText?.trim();
                    const value = element.innerText.trim();
                    if (key.toLowerCase().includes('email') && !validateEmail(value)) {
                        alert('Invalid email format!');
                        hasInvalid = true;
                    }
                });

                if (hasInvalid) {
                    event.preventDefault();
                    toggleEdit.checked = true;
                    return;
                }

                submitProfileData();

                editables.forEach(element => {
                    element.contentEditable = false;
                    element.classList.remove('editing-mode');
                });

                // 禁止头像点击
                profileImageWrapper.classList.remove('cursor-pointer');
                uploadOverlay.classList.add('opacity-0');
                uploadOverlay.classList.remove('opacity-30');
                uploadOverlay.removeEventListener('click', selectImage);

            } else {
                // 进入 Edit 模式
                editables.forEach(element => {
                    element.contentEditable = true;
                    element.classList.add('editing-mode');
                });

                // 允许头像点击
                profileImageWrapper.classList.add('cursor-pointer');
                uploadOverlay.classList.remove('opacity-0');
                uploadOverlay.classList.add('opacity-30');
                uploadOverlay.addEventListener('click', selectImage);
            }
        });

        function selectImage() {
            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.accept = 'image/*';
            fileInput.click();

            fileInput.onchange = function (event) {
                const file = event.target.files[0];
                if (file) {
                    selectedImageFile = file;

                    // 更新预览
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        profileImage.src = e.target.result;
                    };
                    reader.readAsDataURL(file);
                }
            };
        }

        function submitProfileData() {
            const data = new FormData();

            // 收集文本信息
            editables.forEach(element => {
                const key = element.id || 'about';
                let value = element.innerText.trim();
                data.append(key, value);
            });

            // 收集头像
            if (selectedImageFile) {
                data.append('pic', selectedImageFile);
            }

            apiRequest('/profile', 'PUT', data)
            .then(result => {
                console.log('Profile updated:', result);
                alert('Profile updated successfully!');
            })
            .catch(error => {
                console.error('Error updating profile:', error);
                alert('Error updating profile: ' + error);
            });
            }
    </script>
)}
</Card>
