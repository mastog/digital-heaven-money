---
const {links} = Astro.props;
const hasLinks = Array.isArray(links) && links.length > 0;
import Typed from '../Typed.jsx';
---
<div class="container">
  {hasLinks ? (
    <>
      <svg id="force-graph"></svg>
      <div id="links-data" style="display: none;">
        {JSON.stringify(links)}
      </div>
    </>
  ): (
    <Typed strings={["No Relationship available, please create one."]} client:load/>
)}
  <script>
    import * as d3 from 'd3';

const raw = document.getElementById('links-data').textContent.trim();
    const links = JSON.parse(raw);

// 转换输入数据为图结构
const processData = (links) => {
  const nodes = [];
  const edges = [];
  const nodeMap = new Map();

  links.forEach(link => {
    // 处理第一个节点
    if (!nodeMap.has(link.id1)) {
      nodeMap.set(link.id1, {
        id: nodeMap.size,
        name: link.name1,
        image: link.image1,
        href: '/deceased/'+link.id1
      });
    }

    // 处理第二个节点
    if (!nodeMap.has(link.id2)) {
      nodeMap.set(link.id2, {
        id: nodeMap.size,
        name: link.name2,
        image: link.image2,
        href: '/deceased/'+link.id2
      });
    }

    // 添加边
    edges.push({
      source: nodeMap.get(link.id1).id,
      target: nodeMap.get(link.id2).id,
      relation: link.relation
    });
  });

  return {
    nodes: Array.from(nodeMap.values()),
    edges
  };
};

// 当DOM加载完成后执行
document.addEventListener('DOMContentLoaded', () => {
  const data = processData(links);
  const container = document.querySelector('#force-graph');
  const width = container.clientWidth;
  const height = 600;
  const margin = { top: 20, right: 20, bottom: 20, left: 20 };

  const svg = d3.select('#force-graph')
    .attr('width', width)
    .attr('height', height)
    .append('g')
    .attr('transform', `translate(${margin.left},${margin.top})`);

  // 创建力导向模拟
  const simulation = d3.forceSimulation()
    .force('link', d3.forceLink().id(d => d.id).distance(250))
    .force('charge', d3.forceManyBody().strength(-50))
    .force('center', d3.forceCenter(width/2, height/2))
  .force('x', d3.forceX(width / 2).strength(0.05))
  .force('y', d3.forceY(height / 2).strength(0.05))
  .force('collide', d3.forceCollide().radius(70));

  // 创建连线
  const link = svg.append('g')
    .selectAll('line')
    .data(data.edges)
    .enter().append('line')
    .attr('stroke', '#999')
    .attr('stroke-width', 6)
    .attr('stroke-opacity', 0.6);

  // 创建连线文字
  const linkText = svg.append('g')
    .selectAll('text')
    .data(data.edges)
    .enter().append('text')
    .text(d => d.relation)
    .attr('font-size', 16)
    .attr('fill', '#333')
    .attr('font-family', 'inherit')
    .style('cursor', 'default');

  // 创建节点组
  const node = svg.append('g')
    .selectAll('a')
    .data(data.nodes)
    .enter().append('a')
    .attr("xlink:href", d => d.href)
    .call(d3.drag()
      .on('start', dragstarted)
      .on('drag', dragged)
      .on('end', dragended)
    )
    .on('mouseover', function() {
      d3.select(this).style('cursor', 'grab');// 鼠标悬停时变为手形指针
      d3.select(this).raise(); // 提升层级
      d3.select(this).select('image')
        .transition().duration(300)
        .style('opacity', 1)
      d3.select(this).select('text')
        .transition().duration(200)
        .style('opacity', 1);
    })
    .on('mouseout', function() {
      d3.select(this).style('cursor', 'default'); // 鼠标离开恢复默认
      d3.select(this).select('image')
        .transition().duration(300)
        .style('opacity', 0.8)
      d3.select(this).select('text')
        .transition().duration(200)
        .style('opacity', 0);

    })

  // 创建圆形裁剪路径
  node.append('clipPath')
    .attr('id', d => `clip-${d.id}`)
    .append('circle')
    .attr('r', 35);

  // 添加头像图片
  node.append('image')
    .attr('xlink:href', d => d.image)
    .attr('width', 70)
    .attr('height', 70)
    .attr('x', -35)
    .attr('y', -35)
    .attr('clip-path', d => `url(#clip-${d.id})`)
    .attr('preserveAspectRatio', 'xMidYMid slice')
    .style('filter', 'grayscale(100%)');

  // 添加姓名标签
  node.append('text')
  .text(d => d.name)
  .attr('y', 55)
  .attr('text-anchor', 'middle')
  .attr('fill', '#333')
  .attr('font-size', 16)
  .attr('font-family', 'inherit')
  .style('cursor', 'default')
  .style('opacity', 0);

  // 更新模拟器
  simulation.nodes(data.nodes).on('tick', ticked);
  simulation.force('link').links(data.edges);

  function ticked() {
    link
      .attr('x1', d => d.source.x)
      .attr('y1', d => d.source.y)
      .attr('x2', d => d.target.x)
      .attr('y2', d => d.target.y);

    linkText
      .attr('x', d => (d.source.x + d.target.x) / 2)
      .attr('y', d => (d.source.y + d.target.y) / 2);

    node.attr('transform', d => `translate(${d.x},${d.y})`);
  }

  function dragstarted(event, d) {
    if (!event.active) simulation.alphaTarget(0.3).restart();
    d.fx = d.x;
    d.fy = d.y;
  }

  function dragged(event, d) {
    d.fx = event.x;
    d.fy = event.y;
  }

  function dragended(event, d) {
    if (!event.active) simulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
  }
});
  </script>
</div>

<style>
  .container {
    width: 100%;
    height: 100%;
  }

  #force-graph {
    width: 100%;
    height: 600px;
  }
</style>