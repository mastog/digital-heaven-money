---
const database = {
  users: [
    { id: 1, name: 'Alice', age: 30, active: true },
    { id: 2, name: 'Bob', age: 25, active: false },
  ],
  products: [
    { sku: 'A1', name: 'Laptop', price: 999.99, stock: 10 },
    { sku: 'B2', name: 'Phone', price: 599.99, stock: 25 },
  ],
  orders: [
    { orderId: 'O1', total: 150.00, completed: true },
    { orderId: 'O2', total: 200.00, completed: false },
  ]
};
---

<style is:global>
  .table-wrapper:empty::before {
    content: "Please select the data type above.";
    display: flex;
    align-items: center;
    justify-content: center;
    color: #8d8d8d;
    height: 125px;
  }

  .admin-panel {
    max-width: 1200px;
    margin: 2rem auto;
  }

  .type-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .type-group {
    display: flex;
    gap: 0.75rem;
  }

  .add-btn {
    background: #b8b8b8 !important;
    border-color: #b8b8b8 !important;
    margin-left: auto;
  }

  .add-btn:hover {
    background: #8d8d8d !important;
    border-color: #8d8d8d !important;
  }

  .type-btn {
    padding: 0.5rem 1rem;
    border-color: #b8b8b8;
    border-radius: 8px 8px 0 0;
    background: #b8b8b8;
    cursor: pointer;
    transition: all 0.2s;
  }

  .type-btn.active {
    border-color: #8d8d8d;
    background: #8d8d8d;
    color: white;
  }

  .type-btn:hover {
    border-color: #8d8d8d;
    background: #8d8d8d;
    color: white;
  }

  .table-wrapper {
    border: 2px dashed #b8b8b8;
    border-radius: 0 0 16px 16px;
    min-height: 125px;
    max-height: 600px;
    overflow-y: auto;
    background: white;
    transition: all 0.3s;
  }

  .data-table {
    table-layout: fixed;
    width: 100%;
    border-collapse: collapse;
  }

  .data-table th,
  .data-table td {
    padding: 12px 36px 12px 16px;
    text-align: left;
    border: 2px solid #d1d5db;
    white-space: nowrap;
  }

  .data-table th {
    background: #f8fafc;
    font-weight: 500;
    position: sticky;
    top: 0;
  }

  .data-table thead tr:first-child th {
    border-top: none;
  }

  .data-table tbody tr:last-child td {
    border-bottom: none;
  }

  .data-table tr > :first-child {
    border-left: none;
  }

  .data-table tr > :last-child {
    border-right: none;
  }

  .data-table col:last-child.adaptive-fill {
    border-right: none;
  }

  .data-table col {
    min-width: 120px;
  }

  .adaptive-fill {
    width: 100%;
    min-width: 0;
  }

  .type-row {
    font-size: 0.9em;
    color: #64748b;
  }
</style>

<div class="admin-panel">
  <div class="type-bar">
    <div class="type-group">
      {Object.keys(database).map((type) => (
        <button 
          class="type-btn" 
          data-type={type}
          key={type}
        >
          {type}
        </button>
      ))}
    </div>

    <button class="type-btn add-btn" id="addButton">
      Add
    </button>
  </div>

  <div class="table-wrapper mb-5" id="tableContainer"></div>
</div>

<script is:inline define:vars={{ database }}>
(function() {
  function getType(value) {
    if (value === null) return 'null';
    if (Array.isArray(value)) return 'array';
    return typeof value;
  }

  function createTableHeader(firstItem) {
    if (!firstItem) return '';
    const keys = Object.keys(firstItem);
    return `
      <tr>
        <th></th>
        ${keys.map(key => `<th>${key}</th>`).join('')}
        <th>operation</th>
      </tr>
      <tr class="type-row">
        <th>number</th>
        ${keys.map(key => `<th>${getType(firstItem[key])}</th>`).join('')}
        <th>action</th>
      </tr>
    `;
  }

  function createTableBody(data) {
    return data.map((item, index) => `
      <tr>
        <td>${index + 1}</td>
        ${Object.values(item).map(value => `
          <td>${
            typeof value === 'boolean' 
              ? value.toString() 
              : (typeof value === 'object' 
                  ? JSON.stringify(value) 
                  : value)
          }</td>
        `).join('')}
        <td style="color:red">delete</td>
      </tr>
    `).join('');
  }

  function handleTypeClick(type) {
    const container = document.getElementById('tableContainer');
    const data = database[type];
    
    if (!data || !data.length) {
      container.innerHTML = '';
      return;
    }

    container.innerHTML = `
      <table class="data-table">
        <colgroup></colgroup>
        <thead>${createTableHeader(data[0])}</thead>
        <tbody>${createTableBody(data)}</tbody>
      </table>
    `;

    const table = container.querySelector('table');
    const parentWidth = container.offsetWidth;
    const colgroup = table.querySelector('colgroup');
    let totalWidth = 0;

    const measurer = document.createElement('div');
    measurer.style.position = 'absolute';
    measurer.style.visibility = 'hidden';
    measurer.style.whiteSpace = 'nowrap';
    document.body.appendChild(measurer);

    const keys = ['#', ...Object.keys(data[0]), 'operation'];
    keys.forEach(() => {
      colgroup.appendChild(document.createElement('col'));
    });

    const cols = Array.from(colgroup.querySelectorAll('col'));
    cols.forEach((col, colIndex) => {
      const cells = [
        ...table.querySelectorAll(`th:nth-child(${colIndex + 1})`),
        ...table.querySelectorAll(`td:nth-child(${colIndex + 1})`)
      ];

      const headerText = table.rows[0].cells[colIndex]?.textContent || '';
      
      let maxWidth = 0;
      [headerText, ...cells.map(c => c.textContent)].forEach(text => {
        measurer.textContent = text;
        maxWidth = Math.max(maxWidth, measurer.offsetWidth);
      });

      const columnWidth = maxWidth + 32;
      col.style.width = `${columnWidth}px`;
      totalWidth += columnWidth;
    });

    document.body.removeChild(measurer);

    if (totalWidth < parentWidth) {
      const fillCol = document.createElement('col');
      fillCol.className = 'adaptive-fill';
      colgroup.appendChild(fillCol);
      
      const rows = table.querySelectorAll('tr');
      rows.forEach(tr => {
        const td = document.createElement(tr.tagName === 'TR' && tr.parentNode.nodeName === 'THEAD' ? 'th' : 'td');
        td.innerHTML = '&nbsp;';
        tr.appendChild(td);
      });
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.type-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        document.querySelectorAll('.type-btn').forEach(b => b.classList.remove('active'));
        e.target.classList.add('active');
        handleTypeClick(e.target.dataset.type);
      });
    });
  });
})();
</script>