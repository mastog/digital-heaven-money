---
import { Image } from "astro:assets";
import decorForm from "../../assets/pics/contact-pic.svg";
import { createRoot } from 'react-dom/client';
import FormComponent from '../FormComponents.jsx';
---
<head>
  <script type="module">
    import RefreshRuntime from 'http://localhost:4321/@react-refresh';
    RefreshRuntime.injectIntoGlobalHook(window);
    window.$RefreshReg$ = () => {};
    window.$RefreshSig$ = () => (type) => type;
    window.__vite_plugin_react_preamble_installed__ = true;
  </script>
</head>
<div
  class="flex relative justify-start items-center p-[60px] bg-[#F3F3F3] rounded-[45px] overflow-hidden"
>
  <div class="bg-gray sm:p-6 h-full w-full lg:max-w-lg">
    <!-- Sign In / Sign Up Toggle -->
    <div class="flex flex-col sm:flex-row gap-[35px] sm:items-center mb-10">
      <div class="flex items-center gap-[14px]">
        <input
          type="checkbox"
          id="checkbox1"
          name="checkbox1"
          class="form-checkbox text-black"
          checked
        />
        <label for="checkbox1" class="text-black">
          Sign In
        </label>
      </div>
      <div class="flex items-center gap-[14px]">
        <input
          type="checkbox"
          id="checkbox2"
          name="checkbox2"
          class="form-checkbox text-black"
        />
        <label for="checkbox2" class="flex items-center text-black">
          Sign Up
        </label>
      </div>
    </div>
    
    <!-- Form Component -->
    <div id="formComponent">
    </div>
  </div>
  <!-- Image Decoration -->
  <picture class="ml-auto hidden lg:block">
    <Image src={decorForm} alt="decor" class="h-auto max-h-full w-auto object-contain" />
  </picture>
</div>
<style>
  .form-checkbox {
    appearance: none;
    width: 28px;
    height: 28px;
    border: 1px solid #000;
    border-radius: 50%;
    outline: none;
    cursor: pointer;
    position: relative;
  }

  .form-checkbox:before {
    content: "";
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    position: absolute;
    top: 0;
    left: 0;
    background: var(--green);
    transform: scale(0);
    transition: transform 0.1s ease-in-out;
  }

  .form-checkbox:checked:before {
    transform: scale(0.6);
  }
</style>
<script>
  import { createElement } from 'react';
  import { createRoot } from 'react-dom/client';
  import FormComponent from '../FormComponents.jsx';

  function handleLoginSuccess(data) {
    // Store tokens in localStorage
    if (data.access_token && data.refresh_token) {
      localStorage.setItem('accessToken', data.access_token);
      localStorage.setItem('refreshToken', data.refresh_token);
      alert('Login successful!');
      window.location.href = '/';
    }
  }

  function handleRegisterSuccess(data) {
    alert('Registration successful!');
    window.location.reload(); // Refresh the page
  }

  function toggleForm(isSignUp) {
    var cb1 = document.getElementById("checkbox1") as HTMLInputElement;
    var cb2 = document.getElementById("checkbox2") as HTMLInputElement;

    cb1.checked = !isSignUp;
    cb2.checked = isSignUp;

    const formComponent = document.getElementById('formComponent');
    formComponent.innerHTML = '';
    const formProps = isSignUp
      ? {
          apiUrl: '/register',
          method: 'POST',
          fields: [
            { name: 'username', label: 'Username*', type: 'text', placeholder: 'Username', required: true },
            { name: 'email', label: 'Email*', type: 'email', placeholder: 'Email', required: true },
            { name: 'password', label: 'Password*', type: 'password', placeholder: 'Password', required: true },
            { name: 'confirm_password', label: 'Confirm Password*', type: 'password', placeholder: 'Confirm Password', required: true }
          ],
          submitText: 'Join',
          onSuccess: handleRegisterSuccess
        }
      : {
          apiUrl: '/login',
          method: 'POST',
          fields: [
            { name: 'username', label: 'Username*', type: 'text', placeholder: 'Username', required: true },
            { name: 'password', label: 'Password*', type: 'password', placeholder: 'Password', required: true }
          ],
          submitText: 'Login',
          onSuccess: handleLoginSuccess
        };
    const root = createRoot(formComponent);
    root.render(createElement(FormComponent, formProps));
  }
  document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('checkbox1').addEventListener('change', () => toggleForm(false));
    document.getElementById('checkbox2').addEventListener('change', () => toggleForm(true));
    toggleForm(false)
  });
</script>
