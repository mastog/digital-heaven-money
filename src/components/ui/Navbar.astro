---
import { Astronav, MenuItems, MenuIcon } from "astro-navbar";
import { apiRequest } from '../../utils/api';
const response = await apiRequest("/current", "POST", {}, Astro);
const menuitems = [
  { href: '/about', label: 'About us' },
  { href: '/services', label: 'Services' },
  { href: '/memorial-hall', label: 'Memorial Hall' },
  { href: '/profile', label: 'Profile' },
];

if (response && response.is_admin) {
  menuitems.push({ href: '/administration', label: 'Administration' });
}
---

<div class="mt-20">
  <nav class="w-full top-0 left-0 z-50 fixed bg-white">
    <header class="flex flex-col lg:flex-row justify-between items-center my-5 px-6 md:px-32">
      <Astronav>
        <div class="flex w-full lg:w-auto items-center justify-between">
          <a href="/" class="flex items-center rounded-lg p-3 space-x-3 rtl:space-x-reverse transform will-change-transform transition-all duration-300">
            <img src="/Logo.svg" class="h-8" alt="Logo" />
            <svg class="border-animation absolute inset-0 w-full h-full pointer-events-none transform translate-x-[-12.5px]" viewBox="0 0 100 100" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg">
              <rect class="animated-border" x="1" y="1" width="98" height="98" rx="8" ry="32" fill="none" stroke="currentColor" stroke-width="2" pathLength="100"/>
            </svg>
          </a>

          <div class="block lg:hidden">
            <div id="menu-icon" class="w-8 h-8 text-black cursor-pointer">
              <!-- Open (hamburger) icon -->
              <svg id="open-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" class="w-8 h-8">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
              </svg>
              <!-- Close (X) icon -->
              <svg id="close-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" class="w-8 h-8 hidden">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </div>
          </div>
        </div>
        
        <nav class="hidden w-full lg:w-auto mt-2 lg:flex lg:mt-0" id="menu-items">
          <ul class="font-medium flex flex-col items-center p-4 lg:p-0 mt-4 border rounded-lg lg:flex-row lg:space-x-8 lg:mt-0 lg:border-0">
            {menuitems.map((item, index) => (
              <li class="transition duration-300 ease-in-out transform will-change-transform hover:scale-105">
                <a
                  href={item.href}
                  class="mobile-nav-link underline-hover block py-2 px-3 text-black rounded lg:bg-transparent lg:p-0.5"
                  data-close-menu="true"
                >
                  {item.label}
                </a>
              </li>
            ))}
            <div class="lg:hidden flex items-center justify-center mt-3 gap-4">
              <a 
                id="mobile-login-btn"
                class="mobile-nav-link px-9 py-5 rounded-2xl border border-zinc-900 bg-white hover:bg-black text-black hover:text-white inline-flex transition-colors duration-300"
                href="/login"
                data-close-menu="true"
              >
                <h2 class="text-center text-xl font-normal leading-7">Login</h2>
              </a>
              <a
                id="mobile-logout-btn"
                class="mobile-nav-link px-9 py-5 rounded-2xl border border-zinc-900 bg-white hover:bg-black text-black hover:text-white inline-flex hidden transition-colors duration-300"
                href="#"
                data-close-menu="true"
              >
                <h2 class="text-center text-xl font-normal leading-7">Logout</h2>
              </a>
            </div>
          </ul>
        </nav>
      </Astronav>

      <div>
        <div class="hidden lg:flex items-center gap-4">
          <a id="desktop-login-btn" class="px-9 py-3 rounded-2xl border border-zinc-900 bg-white hover:bg-black text-black hover:text-white inline-flex transition-colors duration-300" href="/login">
            <h2 class="text-center text-xl font-normal leading-7">Login</h2>
          </a>
          <a id="desktop-logout-btn" class="px-9 py-3 rounded-2xl border border-zinc-900 bg-white hover:bg-black text-black hover:text-white inline-flex hidden transition-colors duration-300" href="#">
            <h2 class="text-center text-xl font-normal leading-7">Logout</h2>
          </a>
        </div>
      </div>
    </header>
  </nav>
</div>

<script>
  import {apiRequest} from "../../utils/api";
  import {showNotification} from '../../utils/notifications.js';
  // Function to check login status
  async function checkLoginStatus() {
    try {
      const response = await apiRequest("/current", "POST", {});
      return response !== null;
    } catch (error) {
      console.error('Error checking login status:', error);
      return false;
    }
  }

  // Function to update UI based on login status
  async function updateLoginUI() {
    const isLoggedIn = await checkLoginStatus();

    // Desktop buttons
    const desktopLoginBtn = document.getElementById('desktop-login-btn');
    const desktopLogoutBtn = document.getElementById('desktop-logout-btn');

    // Mobile buttons
    const mobileLoginBtn = document.getElementById('mobile-login-btn');
    const mobileLogoutBtn = document.getElementById('mobile-logout-btn');

    if (isLoggedIn) {
      // Show logout buttons and hide login buttons
      if (desktopLoginBtn) desktopLoginBtn.classList.add('hidden');
      if (desktopLogoutBtn) desktopLogoutBtn.classList.remove('hidden');
      if (mobileLoginBtn) mobileLoginBtn.classList.add('hidden');
      if (mobileLogoutBtn) mobileLogoutBtn.classList.remove('hidden');
    } else {
      // Show login buttons and hide logout buttons
      if (desktopLoginBtn) desktopLoginBtn.classList.remove('hidden');
      if (desktopLogoutBtn) desktopLogoutBtn.classList.add('hidden');
      if (mobileLoginBtn) mobileLoginBtn.classList.remove('hidden');
      if (mobileLogoutBtn) mobileLogoutBtn.classList.add('hidden');
    }
  }

  // Function to handle logout
  async function handleLogout() {
    try {
      const response = await apiRequest("/logout", "POST", {});
      showNotification([response.message]);
      await new Promise(resolve => setTimeout(resolve, 1000));
      // Update UI after logout
      updateLoginUI();
      // Optionally redirect to home page
      window.location.href = '/';
    } catch (error) {
      console.error('Logout failed:', error);
    }
  }

  // Initialize the UI when page loads
  document.addEventListener('DOMContentLoaded', () => {
    updateLoginUI();

    // Get references to the menu icon, open/close icons, and menu items
    const menuIcon = document.getElementById('menu-icon');
    const openIcon = document.getElementById('open-icon');
    const closeIcon = document.getElementById('close-icon');
    const menuItems = document.getElementById('menu-items');
    const closeMenuItems = document.querySelectorAll('[data-close-menu="true"]');  // Select all items with the 'data-close-menu' attribute

    // Toggle the menu visibility and icon when the menu icon is clicked
    if (menuIcon) {
      menuIcon.addEventListener('click', () => {
        menuItems.classList.toggle('hidden');  // Toggle the 'hidden' class on the menu

        // Toggle between open and close icons
        openIcon.classList.toggle('hidden');
        closeIcon.classList.toggle('hidden');
      });
    }

    // Close the menu when any item is clicked
    closeMenuItems.forEach(item => {
      item.addEventListener('click', () => {
        menuItems.classList.add('hidden');  // Add the 'hidden' class to hide the menu
        openIcon.classList.remove('hidden');  // Show the open (hamburger) icon
        closeIcon.classList.add('hidden');  // Hide the close (X) icon
      });
    });

    // Add logout event listeners
    const desktopLogoutBtn = document.getElementById('desktop-logout-btn');
    const mobileLogoutBtn = document.getElementById('mobile-logout-btn');

    if (desktopLogoutBtn) {
      desktopLogoutBtn.addEventListener('click', (e) => {
        e.preventDefault();
        handleLogout();
      });
    }

    if (mobileLogoutBtn) {
      mobileLogoutBtn.addEventListener('click', (e) => {
        e.preventDefault();
        handleLogout();
      });
    }
  });
</script>
<style>
  .underline-hover {
    position: relative;
  }
  .underline-hover::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    height: 2px;
    width: 100%;
    background-color: currentColor;
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.2s ease-in-out;
  }
  .underline-hover:hover::after {
    transform: scaleX(1);
  }
  
  .border-animation .animated-border {
      stroke-dasharray: 100;
      stroke-dashoffset: 100;
      transition: stroke-dashoffset 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  a:hover .animated-border {
      stroke-dashoffset: 0;
  }

  @media (hover: hover) {
      a {
          transition: transform 0.3s, scale 0.3s, background-color 0.3s, color 0.3s;
      }
      a .animated-border {
          transition: stroke-dashoffset 0.6s cubic-bezier(0.4, 0, 0.2, 1);
      }
  }
</style>